CRLTest = TestCase("CRL");
CRLTest.prototype.setUp = function() {
};
{
    {
        CRLTest.prototype.test_CRL_Extension_new1 = function() {
            assertException(function() {
                new trusted.PKI.CRL();
            });
        };
        //Create crl
        CRLTest.prototype.test_CRL_Extension_create = function() {
            var der = Hex.toDer
            assertNotUndefined(new trusted.PKI.CRL(der));
        };
        //Base CRL Number
        CRLTest.prototype.test_CRL_Extension_BaseCRLNumber = function() {
            var der = Hex.toDer("3082010B3081F8020101300706035504030500303431323030060355040613294D6963726F736F66742041757468656E7469636F646528746D2920526F6F7420417574686F72697479180F32303134303732323136353831305A304B3023020200C0180F32303036313230313132343430305A300C300A0603551D15040302010530240203000114180F32303132303930343134313432325A300C300A0603551D150403020101A0563054300C0603551D1B0405020300014D30440603551D1C043D303BA033A031862F687474703A2F2F6364702E736B626B6F6E7475722E72752F6364702F6B6F6E7475722D6361332D323031332E63726C81010184010130070603551D01050003050002020301");
            var crl = new trusted.PKI.CRL(der);
            var extn = crl.getExtension("2.5.29.27");
            var aki = new trusted.PKI.BaseCRLNumber(extn.value);
            assertEquals("333",aki.value);
        };
        //Issuer Alternative Name        
        CRLTest.prototype.test_CRL_Extension_IssuerAlternativeName = function() {
            var der = Hex.toDer
            var crl = new trusted.PKI.CRL(der);
            var extn = crl.getExtension("2.5.29.8");
            var ian = new trusted.PKI.GeneralName(extn.value);
            var str = "http://digt.com/IssuerAlternativeName";
            assertEquals(str,ian.name);
            
        };
    }
}