CertificateTest = TestCase("Certificate");
CertificateTest.prototype.setUp = function() {

};

{
    {
        CertificateTest.prototype.test_new_1 = function() {
            var der = Hex.toDer("3082031730820280A003020102020436E7AD9C300D06092A864886F70D01010505003040310B30090603550406130247423110300E060355040A1307566961436F64653110300E060355040B130743412044617461310D300B060355040B130443412031301E170D3939303331313131313834385A170D3139303331313131343834385A3040310B30090603550406130247423110300E060355040A1307566961436F64653110300E060355040B130743412044617461310D300B060355040B13044341203130819D300D06092A864886F70D010101050003818B0030818702818100B0B367A796B57683E91603D91AA076D574E79C05D2513FDB4F19A1A8394ECB247D61C41E6A20AE0F81DEEAB839FD1B1F6B3640ED4D2125F2A3D9A151D86CC01B96F8D44294D4A7CE1B8FD35426A284EF3285AF4A3FF13236AF3DE63A27EB03C2257EF4612BAD8A1A4BE69B3668D42FE5D28894DC16AADAC2154C6CC3E11991C9020103A382011E3082011A301106096086480186F842010104040302000730620603551D1F045B30593057A055A053A451304F310B30090603550406130247423110300E060355040A1307566961436F64653110300E060355040B130743412044617461310D300B060355040B130443412031310D300B0603550403130443524C31302B0603551D1004243022800F31393939303331313131313834385A810F32303139303331313131313834385A300B0603551D0F040403020106301F0603551D230418301680142887B1A7887FD6DDCB6FA11C0E5AD02E15319DCC301D0603551D0E041604142887B1A7887FD6DDCB6FA11C0E5AD02E15319DCC300C0603551D13040530030101FF301906092A864886F67D074100040C300A1B0456342E3003020490300D06092A864886F70D01010505000381810053DFD2E9F0EEE3DA00678FEA1547761FE0B5A4A04702C2B3D8B44AD4FBAC1C81B923206362D8546F0975D63AE630ABB173BC14A4FE442F5264D016632D39B6E938EE653390D18118800567236F3C1D427CD1F1F386A0FACB566CBE1BF5329C6193BBDFEDC04FC1D1E545CEE3441588D7CCC3FCAB189651F4E0A87CC1CB98BCC1");
            var dps = new trusted.PKI.Certificate(der);
            assertEquals("2", dps.version);
            assertEquals("921152924", dps.serialNumber);
            assertEquals("8", dps.extensions.length);
            assertEquals("1999", dps.notBefore.getFullYear());
            assertEquals("2019", dps.notAfter.getFullYear());
            assertEquals("2", dps.notBefore.getMonth(), dps.notAfter.getMonth());
            assertEquals("11", dps.notAfter.getDate(), dps.notBefore.getDate());
            assertEquals("4", dps.issuerName.RDNs.length, dps.subjectName.RDNs.length);
           
        };

        CertificateTest.prototype.test_fromObject = function() {
            var obj = {
                tbsCertificate: {
                    version: 2,
                    serialNumber: 1,
                    signature: {
                        algorithm: "1.2.840.113549.1.1.4",
                        parameters: Hex.toDer("0500")
                    },
                    issuer: {
                        rdnSequence: [
                            [{type: "2.5.4.6", value: trusted.ASN.fromObject("US", "UTF8_STRING").encode()}],
                            [{type: "2.5.4.10", value: trusted.ASN.fromObject("MSFT", "UTF8_STRING").encode()}],
                            [{type: "2.5.4.3", value: trusted.ASN.fromObject("Microsoft Authenticode(tm) Root Authority", "UTF8_STRING").encode()}]
                        ]
                    },
                    validity: {
                        notBefore: {
                            utcTime: new Date()},
                        notAfter: {
                            utcTime: new Date()}
                    },
                    subject: {
                        rdnSequence: [
                            [{type: "2.5.4.6", value: trusted.ASN.fromObject("US", "UTF8_STRING").encode()}],
                            [{type: "2.5.4.10", value: trusted.ASN.fromObject("MSFT", "UTF8_STRING").encode()}],
                            [{type: "2.5.4.3", value: trusted.ASN.fromObject("Microsoft Authenticode(tm) Root Authority", "UTF8_STRING").encode()}]
                        ]
                    },
                    subjectPublicKeyInfo: {
                        algorithm: {
                            algorithm: "1.2.840.113549.1.1.1",
                            parameters: Hex.toDer("0500")
                        },
                        subjectPublicKey: new BitString(Hex.toDer("003082010A0282010100DF08BAE33F6E649BF589AF28964A078F1B2E8B3E1DFCB88069A3A1CEDBDFB08E6C8976294FCA603539AD7232E00BAE293D4C16D94B3C9DDAC5D3D109C92C6FA6C2605345DD4BD155CD031CD2595624F3E578D807CCD8B31F903FC01A71501D2DA712086D7CB0866CC7BA853207E1616FAF03C56DE5D6A18F36F6C10BD13E69974872C97FA4C8C24A4C7EA1D194A6D7DCEB05462EB818B4571D8649DB694A2C21F55E0F542D5A43A97A7E6A8E504D2557A1BF1B1505437B2C058DBD3D038C93227D63EA0A5705060ADB6198652D4749A8E7E656755CB8640863A9304066B2F9B6E334E86730E1430B87FFC9BE72105E23F09BA74865BF09887BCD72BC2E799B7B0203010001"), 0)
                    }
                },
                signatureAlgorithm: {
                    "algorithm": "1.2.840.113549.1.1.4",
                    parameters: Hex.toDer("0500")},
                signature: new BitString(Hex.toDer("002DC9E2F6129E5D5667FAFA4B9A7EDC29565C80140228856E26F3CD58DA5080C5F819B3A67CE29D6B5F3B8F2274E61804FC4740D87A3F3066F012A4D1EB1DE7B6F498AB5322865158EE230976E41D455C4BFF4CE302500113CC41A45297D486D5C4FE8383657DEABEA2683BC1B12998BFA2A5FC9DD384EE701750F30BFA3CEFA9278B91B448C845A0E101424B4476041CC219A28E6B2098C4DD02ACB4D2A20E8D5DB9368E4A1B5D6C1AE2CB007F10F4B295EFE3E8FFA17358A9752CA2499585FECCDA448AC21244D244C8A5A21FA95A8E56C2C37BCF4260DC821FFBCE74067ED6F1AC196A4F745CC51566316CC16271910F595B7D2A821ADFB1B4D81D37DE0D0F"), 0)
            };

            var cert = new trusted.PKI.Certificate(obj);
            assertEquals(2, cert.version);
            assertEquals(1, cert.serialNumber);
        };
        CertificateTest.prototype.test_checkValidity = function(){
            var der = Hex.toDer
            var dps = new trusted.PKI.Certificate(der);
            assertEquals(false,dps.checkValidity(new Date("1999-03-10 11:18:48 UTC"))); // раньше
            assertEquals(false,dps.checkValidity(new Date("1999-03-11 11:18:47 UTC"))); // раньше на 1 сек
            assertEquals(true,dps.checkValidity(new Date("1999-03-11 11:18:48 UTC")));  // равно началу
            assertEquals(true,dps.checkValidity(new Date("1999-03-12 11:18:48 UTC")));  // между
            assertEquals(true,dps.checkValidity(new Date("2019-03-11 11:48:47 UTC")));  // за 1 сек до конца
            assertEquals(true,dps.checkValidity(new Date("2019-03-11 11:48:48 UTC"))); // равно окончанию
            assertEquals(false,dps.checkValidity(new Date("2019-03-12 11:48:48 UTC"))); // позже
        };
        CertificateTest.prototype.test_getExtension_fromString = function(){
            var der = Hex.toDer
            var dps = new trusted.PKI.Certificate(der);
            var str = "2.5.29.16";
            assertEquals("2.5.29.16",dps.getExtension(str).OID.value);
        };
        CertificateTest.prototype.test_getExtension_fromOID = function(){
            var der = Hex.toDer
            var cert = new trusted.PKI.Certificate(der);
            var oid = new trusted.PKI.OID("2.5.29.16");
            assertEquals("2.5.29.16",cert.getExtension(oid).OID.value);
        };
        CertificateTest.prototype.test_checkExtension_fromOID_null = function(){
            var oid = new trusted.PKI.Certificate();
            oid.value = "";
            assertNull(oid.getExtension());
        };
        CertificateTest.prototype.test_checkExtension_fromOID_undefined = function(){
            var oid = new trusted.PKI.Certificate();
            assertNotUndefined(oid.getExtension());
        };
    }
}