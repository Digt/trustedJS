RequestTest = TestCase("Request");

RequestTest.prototype.setUp = function() {
};

{
    {
        RequestTest.prototype.test_Request_new1 = function() {
            assertException(function() {
                new trusted.PKI.Request();
            });
        };
        RequestTest.prototype.test_Request_new2 = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var tbs
            assertEquals(0, req.version);
            assertEquals(tbs, Der.toHex(req.TBSRequest));
            assertEquals("countryName=RU;stateOrProvinceName=Mari El;localityName=Yoshkar-Ola;organizationalUnitName=Information Technology;organizationName=Digt;commonName=Request1", req.subjectName.toString());
            assertEquals(6, req.subjectName.RDNs.length);

        };
        RequestTest.prototype.test_Request_toFromObject = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var obj = req.toObject();
            var req1 = new trusted.PKI.Request(obj);
            assertEquals("1.2.840.113549.1.1.5", req1.signatureAlgorithm.OID.value);
            assertEquals(6, req.subjectName.RDNs.length);
            assertEquals("\u0013\u0002RU", req.subjectName.RDNs[0].attributes[0].value);
            assertEquals("\u0013\u0007Mari El", req.subjectName.RDNs[1].attributes[0].value);
            assertEquals("\u0013\u000bYoshkar-Ola", req.subjectName.RDNs[2].attributes[0].value);
            assertEquals("\u0013\u0016Information Technology", req.subjectName.RDNs[3].attributes[0].value);
            assertEquals("\u0013\u0004Digt", req.subjectName.RDNs[4].attributes[0].value);
            assertEquals("\u0013\bRequest1", req.subjectName.RDNs[5].attributes[0].value);
        };
        RequestTest.prototype.test_Request_toString = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var str = req.toString(req);
            fail("it's doesn't work"); 
        };
        RequestTest.prototype.test_Request_getExtension = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var ext = req.getExtension("2.5.29.15");
            assertEquals("keyUsage", ext.OID.name);
            assertEquals("2.5.29.15", ext.OID.value);
            assertEquals("\u0003\u0002\u0003Ø", ext.value);
            var ext2 = req.getExtension("2.5.29.37");
            assertEquals("extKeyUsage", ext2.OID.name);
            assertEquals("2.5.29.37", ext2.OID.value);
            assertEquals("0\u0014\u0006\b+\u0006\u0001\u0005\u0005\u0007\u0003\u0002\u0006\b+\u0006\u0001\u0005\u0005\u0007\u0003\u0004", ext2.value);
        };

        RequestTest.prototype.test_Request_getAttribute = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var attr = req.getAttribute("1.2.840.113549.1.9.7");
            var attr2 = req.getAttribute("1.2.840.113549.1.9.2");
            assertEquals("1.2.840.113549.1.9.7", attr.OID.value);
            assertEquals("PKCS #9", attr.OID.comment);
            assertEquals("1.2.840.113549.1.9.2", attr2.OID.value);
            assertEquals("PKCS #9", attr2.OID.comment);
        };
        RequestTest.prototype.test_Request_publicKey_fromDer = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var pbk = req.publicKey;
            assertEquals("rsaEncryption", pbk.algorithm.OID.name);
            assertEquals("1.2.840.113549.1.1.1", pbk.algorithm.OID.value);
        };
        RequestTest.prototype.test_Request_publicKey_fromObject = function() {
            var obj = {
                "certificationRequestInfo":
                        {
                            "version": 0,
                            "subject":
                                    {
                                        "rdnSequence":
                                                [
                                                    [
                                                        {
                                                            "type": "2.5.4.6",
                                                            "value": "\u0013\u0002RU"
                                                        }
                                                    ],
                                                    [
                                                        {
                                                            "type": "2.5.4.8",
                                                            "value": "\f\u0004Mari"
                                                        }
                                                    ],
                                                    [
                                                        {
                                                            "type": "2.5.4.7",
                                                            "value": "\f\u0004Yola"
                                                        }
                                                    ],
                                                    [
                                                        {
                                                            "type": "2.5.4.10",
                                                            "value": "\f\u0003Org"
                                                        }
                                                    ],
                                                    [
                                                        {
                                                            "type": "2.5.4.3",
                                                            "value": "\f\nMy request"
                                                        }
                                                    ],
                                                    [
                                                        {
                                                            "type": "1.2.840.113549.1.9.1",
                                                            "value": "\u0016\rmail@email.ru"
                                                        }
                                                    ]
                                                ]
                                    },
                            "subjectPKInfo":
                                    {
                                        "algorithm":
                                                {
                                                    "algorithm": "1.2.840.113549.1.1.1",
                                                    "parameters": null
                                                },
                                        "subjectPublicKey":
                                                {
                                                    "unusedBit": 0,
                                                    "encoded": "0\u0001\n\u0002\u0001\u0001\u0000Òtk¥6´ñGÌ*`Ä\r²\u0002BýÏVØáùyÎoø·l±Í\\ç\b\fµºÒÚì\u0005P\"õI\u0007ì?Vz\u001dNµ¢\u0015B\u0011\u0015'\u001fsqÉøm\u000f\u001e±@h\u001d|³ø@lP\u0015|:,½®[tºü¨íµ`\u0011ZÚ[W¤\u001fÎ\fÑ#ë<ÅÊ\\.l~§§;eoÇßòàÚ{\u0006sY\u0014¶íÒÈÌÂ©\r59GW¤é¬¢÷ö\u0012Pn\u001cëÄÊ>}æÞ¶3§W¶êøùþù>â\u001dIòoî³ yü.\u0013[8`L<\u00019°Gû¬\u0018î4°*»ô~ëp)¼Ý3À/¼,\u0004c½xNCÿo9ÿGâQèUÕ\u0002\u0003\u0001\u0000\u0001"
                                                }
                                    },
                            "attributes":
                                    [
                                        {
                                            "type": "1.2.840.113549.1.9.7",
                                            "values":
                                                    [
                                                        "\f\u000512345"
                                                    ]
                                        },
                                        {
                                            "type": "1.2.840.113549.1.9.2",
                                            "values":
                                                    [
                                                        "\f\nOther name"
                                                    ]
                                        }
                                    ]
                        },
                "signatureAlgorithm":
                        {
                            "algorithm": "1.2.840.113549.1.1.5",
                            "parameters": null
                        },
                "signature":
                        {
                            "unusedBit": 0,
                            "encoded": "\u0015X\u0000LÂI¯õnô±À\u0011?·xñ\u0019o6Zì£Áæ\u0000ôÿu\u0012ìá^»u¸2¸ Åý\na|²\fPü¨æ÷¾MPqG>ÕÁöZ5aâ\u000eëÎH2ý¯FßáÑ\u0011º¿bñy\u0015'mt\u001cd\nI(zá\u0012L2÷z5ûì¶C¸o/÷RU<Ttv¸yì!©já\u001cÆý°®úSÕ\u0000gEô?Óð¢haÇKî.`Õ[erT*îäTr¦]Ñ\u0010ÎAÚ_Ô±5Ás\u0012:ÖÌ* ²Öïéô½\u0003WM¤ðúµâ=Í\"Y\u0007ô$¸;3\u001a*¢uçX#d\u0004jgUä¼æäK\u0018m?kq{h6"
                        }
            };
            var req = new trusted.PKI.Request(obj);
            var pbk = req.publicKey;
            assertEquals("rsaEncryption", pbk.algorithm.OID.name);
            assertEquals("1.2.840.113549.1.1.1", pbk.algorithm.OID.value);
        };
        RequestTest.prototype.test_Request_publicKey_toObject = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var pbk = req.publicKey.toObject();
            assertEquals("1.2.840.113549.1.1.1", pbk.algorithm.algorithm);
        };
        RequestTest.prototype.test_Request_publicKey_toString = function() {
            var der = Hex.toDer
            var req = new trusted.PKI.Request(der);
            var pbk = req.publicKey.toString();
            assertEquals("rsaEncryption (1.2.840.113549.1.1.1) (2048 Bits)", pbk);
        };
        RequestTest.prototype.test_RequestAttribute = function() {
            var der = Hex.toDer("303F060A2B06010401823702010E3131302F300E0603551D0F0101FF0404030203D8301D0603551D250416301406082B0601050507030206082B06010505070304");
            var req = new trusted.PKI.RequestAttribute(der);
            assertEquals("certReqExtensions",req.OID.name);
            assertEquals("1.3.6.1.4.1.311.2.1.14",req.OID.value);
        };
        RequestTest.prototype.test_RequestAttribute_fromObject = function() {
            var obj =
                    {
                                        "type": "1.3.6.1.4.1.311.2.1.14",
                                        "values":
                                                [
                                                    "0/0\u000e\u0006\u0003U\u001d\u000f\u0001\u0001ÿ\u0004\u0004\u0003\u0002\u0003Ø0\u001d\u0006\u0003U\u001d%\u0004\u00160\u0014\u0006\b+\u0006\u0001\u0005\u0005\u0007\u0003\u0002\u0006\b+\u0006\u0001\u0005\u0005\u0007\u0003\u0004"
                                                ]
                    };
            var req = new trusted.PKI.RequestAttribute(obj);
            assertEquals("certReqExtensions",req.OID.name);
            assertEquals("1.3.6.1.4.1.311.2.1.14",req.OID.value);
        };
        RequestTest.prototype.test_RequestAttribute_toObject = function() {
            var der = Hex.toDer("303F060A2B06010401823702010E3131302F300E0603551D0F0101FF0404030203D8301D0603551D250416301406082B0601050507030206082B06010505070304");
            var req1 = new trusted.PKI.RequestAttribute(der);
            var req = req1.toObject();
            assertEquals("1.3.6.1.4.1.311.2.1.14",req.type);
            assertEquals("302F300E0603551D0F0101FF0404030203D8301D0603551D250416301406082B0601050507030206082B06010505070304",Der.toHex(req.values[0]));
        };
        RequestTest.prototype.test_RequestAttribute_toString = function() {
            var der = Hex.toDer("303F060A2B06010401823702010E3131302F300E0603551D0F0101FF0404030203D8301D0603551D250416301406082B0601050507030206082B06010505070304");
            var req1 = new trusted.PKI.RequestAttribute(der);
            var req = req1.toString();
            assertEquals("Attribute (certReqExtensions (1.3.6.1.4.1.311.2.1.14)): 302F300E0603551D0F0101FF0404030203D8301D0603551D250416301406082B0601050507030206082B06010505070304",req);
        };
    }
}